mkdir mongodb-one //or create mongodb-one folder
cd mongodb-one

npm init -y

npm install express --save

//create Express Application
create app.js

const express = require('express');
const app = express();
const port = 3000;

app.get('/', (req, res) => {
  res.send('Hello, Express!');
});

app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});

node app.js
npm install mongodb

create routes.js

const express = require('express');
const router = express.Router();
const connectToMongoDBTest = require('./api/connection-test');

// Define a route that uses the database connection
router.get('/test', async (req, res) => {
  try {
    const result = await connectToMongoDBTest();
    res.send(result);
    
  } catch (error) {
    console.error('Error fetching data from MongoDB', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

module.exports = router;

mkdir api //or create api folder
create connection-test.js

const { MongoClient } = require('mongodb');

const uri = 'mongodb+srv://admin:mongo2023@cluster0.70hdoms.mongodb.net/';

const client = new MongoClient(uri);
async function connectToMongoDBTest() {
  
  try {
    await client.connect();
    console.log('Connected to MongoDB Atlas');
    return "Connected to MongoDB Atlas";
    
  } catch (error) {
    console.error('Error connecting to MongoDB Atlas', error);
    throw error;
  } finally {
    // Ensures that the client will close when you finish/error
    await client.close();
  }
}

module.exports = connectToMongoDBTest;


change app.js to use new routes.js

const express = require('express');
const app = express();
const port = 3000;
const routes = require('./routes');

app.use('/api', routes);

//app.get('/', (req, res) => {
//  res.send('Hello, Express!');
//});

app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});

test list all collections
update connection-test.js
await client.connect();
console.log('Connected to MongoDB Atlas');
//return "Connected to MongoDB Atlas";

const database = client.db('mongodb');

// Use the listCollections method to get a cursor to the collections
const collectionsCursor = database.listCollections();

// Iterate over the cursor to get the collection names
const collectionNames = await collectionsCursor.toArray();

// Print the collection names
console.log('Collections in the database:');
collectionNames.forEach((collection) => {
  console.log(collection.name);
});
return collectionNames;

find one product
await client.connect();
console.log('Connected to MongoDB Atlas');
//return "Connected to MongoDB Atlas";

const database = client.db('mongodb');
    
const products = database.collection('products2'); // Replace with your collection name

// Use the findOne method to find a single item by its _id
const product = await products.findOne({ _id: 1 });

return product;

find product type = simple
await client.connect();
console.log('Connected to MongoDB Atlas');
//return "Connected to MongoDB Atlas";

const database = client.db('mongodb');
    
const products = database.collection('products2'); // Replace with your collection name

const product = await products.find({ type: "simple" }).toArray();

return product;